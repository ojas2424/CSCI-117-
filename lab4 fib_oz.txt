// Haskell version of fib:
//    fib :: Int -> Int
//    fib 0 = 1
//    fib 1 = 1
//    fib x = fib (x-1) + fib (x-2)
//
// Rewrite fib in Oz kernel syntax using the template below, including
// a "skip stack" command added to the first base case, using the 
// primitive operations {Eq X Y B}, {IntMinus X Y A}, and {IntPlus X Y A}.
// 
// Run through the Oz interpreter by calling
//    runFull "declarative" "fib_oz.txt" "fib_oz.out"
// after ghci fib_oz.txt and give a brief explanation of each of the stack outputs.

local X Result ... in
  ... 
  X = 4
  {Fib X Result}
  skip Browse Result
end
